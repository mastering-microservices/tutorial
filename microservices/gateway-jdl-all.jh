// From https://github.com/PacktPublishing/Full-Stack-Development-with-JHipster
// License : https://github.com/PacktPublishing/Full-Stack-Development-with-JHipster/blob/master/LICENSE

/* Online fashion store */

// =================================
// Microservice productorder
// =================================

entity Product {
	name String required
  description String
  image ImageBlob
  price BigDecimal required min(0)
  size Size required
}

enum Size {
	S, M, L, XL, XXL
}

entity ProductCategory {
	name String required
  description String
}

entity Customer {
  userId Long required
	firstName String required
  lastName String required
  gender Gender required
  email String required
  phone String required
  addressLine1 String required
  addressLine2 String
  city String required
  country String required
}

enum Gender {
	MALE, FEMALE, OTHER
}

entity ProductOrder {
	placedDate Instant required
    status OrderStatus required
    invoiceId Long
    code String required
}

enum OrderStatus {
	COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
	quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
	AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

//relationship OneToOne {
//	Customer{user} to User
//}

relationship ManyToOne {
	OrderItem{product} to Product
}

relationship OneToMany {
	Customer{order} to ProductOrder{customer},
    ProductOrder{orderItem} to OrderItem{order},
    ProductCategory{product} to Product{productCategory}
}

// =================================
// Microservice invoice
// =================================

entity Invoice {
		date Instant required
    details String
    status InvoiceStatus required
  	paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
	PAID, ISSUED, CANCELLED
}

entity Shipment {
		trackingCode String
    date Instant required
    details String
}

enum PaymentMethod {
	CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

// =================================
// Microservice notification
// =================================

enum NotificationType {
	EMAIL, SMS, PARCEL
}

entity Notification {
		date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

relationship OneToMany {
	 Invoice{shipment} to Shipment{invoice}
}

// =================================
// API Gateway
// =================================

//dto Product, Customer, ProductOrder, OrderItem, ProductCategory, Invoice, Shipment, Notification with mapstruct
//angularSuffix * with store
//search * with elasticsearch
//filter *

// =================================
// Microservice productorder
// =================================

//service Product, Customer, ProductOrder, OrderItem, ProductCategory with serviceImpl
paginate Product, Customer, ProductOrder, OrderItem, ProductCategory with pagination
microservice Product, Customer, ProductOrder, OrderItem, ProductCategory with productorder

// =================================
// Microservice invoice
// =================================

//service Invoice, Shipment with serviceClass
paginate Invoice, Shipment with pagination
microservice Invoice, Shipment with invoice

// =================================
// Microservice notification
// =================================

//service Notification with serviceClass
paginate Notification with pagination
microservice Notification with notification
